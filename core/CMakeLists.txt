cmake_minimum_required(VERSION 2.8)
PROJECT(core)
IF(UNIX)
    SET(CMAKE_CXX_COMPILER "/usr/bin/g++")
    SET(CMAKE_CXX_FLAGS "-Wall -std=c++0x -lpthread -lcurl -rdynamic -ldl -Dlinux -Wl,-rpath,./")
    SET(CMAKE_CXX_FLAGS_DEBUG "-g -D_DEBUG -O0 -pg")
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2")
	SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
    MESSAGE(STATUS "Linux")
ENDIF(UNIX)

IF(WIN32)
    SET(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /D_WINSOCK_DEPRECATED_NO_WARNINGS /Zm200 /MTd /Zi /Ob0 /Od /RTC1") 
    SET(CMAKE_CXX_FLAGS_MINSIZEREL "/D_WINSOCK_DEPRECATED_NO_WARNINGS /MT /Zm200 /O1 /Ob1 /D NDEBUG") 
    SET(CMAKE_CXX_FLAGS_RELEASE "/D_WINSOCK_DEPRECATED_NO_WARNINGS /MT /Zm200 /O2 /Ob2 /D NDEBUG") 
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/D_WINSOCK_DEPRECATED_NO_WARNINGS /MT /Zm200 /Zi /O2 /Ob1 /D NDEBUG")
    MESSAGE(STATUS "WINDOWS")
    IF(CMAKE_CL_64)
        MESSAGE(STATUS "x64")
    ELSE()
        MESSAGE(STATUS "x86")
    ENDIF(CMAKE_CL_64)
	SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)
ENDIF(WIN32)

SET(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/../bin")
FILE(GLOB LOGIC_INTERFACE "${PROJECT_SOURCE_DIR}/src/interface/*.h")
FILE(GLOB PUBLIC "${PROJECT_SOURCE_DIR}/public/*.h")
FILE(GLOB API "${PROJECT_SOURCE_DIR}/API/*.h")

INCLUDE_DIRECTORIES(
    "${PROJECT_SOURCE_DIR}/API"
    "${PROJECT_SOURCE_DIR}/public"
    "${PROJECT_SOURCE_DIR}/src/interface"
    )

FILE(GLOB LOGIC_DIRS "${PROJECT_SOURCE_DIR}/src/*")
FOREACH(LOGIC_DIR ${LOGIC_DIRS})
    message("当前变量是：${LOGIC_DIR}")
	string(COMPARE NOTEQUAL ${LOGIC_DIR} "${PROJECT_SOURCE_DIR}/src/template" NOT_TEMP)
	string(COMPARE NOTEQUAL ${LOGIC_DIR} "${PROJECT_SOURCE_DIR}/src/create.exe" NOT_CREATE_EXE)
	string(COMPARE NOTEQUAL ${LOGIC_DIR} "${PROJECT_SOURCE_DIR}/src/create.hs" NOT_CREATE_HS)
	string(COMPARE NOTEQUAL ${LOGIC_DIR} "${PROJECT_SOURCE_DIR}/src/interface" NOT_CREATE_INTERFACE)
	IF (NOT_TEMP AND NOT_CREATE_EXE AND NOT_CREATE_HS AND NOT_CREATE_INTERFACE)
		ADD_SUBDIRECTORY(${LOGIC_DIR})
	ENDIF()
ENDFOREACH()

IF(WIN32)
STRING(REPLACE "/" "\\" PROJECT_SOURCE_WIN_DIR ${PROJECT_SOURCE_DIR})

ADD_CUSTOM_TARGET(CopyHeaderFile ALL
	COMMAND copy /y ${PROJECT_SOURCE_WIN_DIR}\\src\\interface\\*.h ${PROJECT_SOURCE_WIN_DIR}\\..\\framework\\interface
	COMMAND copy /y ${PROJECT_SOURCE_WIN_DIR}\\src\\interface\\*.h ${PROJECT_SOURCE_WIN_DIR}\\..\\logic\\interface
)
SET_TARGET_PROPERTIES(CopyHeaderFile PROPERTIES FOLDER "core")
ENDIF(WIN32)

IF(UNIX)
ADD_CUSTOM_TARGET(CopyHeaderFile ALL 
	COMMAND cp -f ${PROJECT_SOURCE_DIR}/src/interface/*.h ${PROJECT_SOURCE_DIR}/../framework/interface
	COMMAND cp -f ${PROJECT_SOURCE_DIR}/src/interface/*.h ${PROJECT_SOURCE_DIR}/../logic/interface
)
ENDIF(UNIX)
